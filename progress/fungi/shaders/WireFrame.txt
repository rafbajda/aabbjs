<shader>
{
	"name":"WireFrame",
	"useModelMatrix":true,
	"useUBOTransform":true,
	"uniforms":[]
}
</shader>

<materials>
[
	{ "name":"MatWireFrame","useBlending":false,"useSampleAlphaCoverage":true, "uniforms":[ ] }
]
</materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec4 a_position;

	uniform UBOTransform{
		mat4 matProjection;
		mat4 matCameraView;
		vec3 posCamera;
	};

	uniform mat4 uModalMatrix;

	out vec3 vBaryCoord;

	void main(void){
		if(a_position.w == 0.0)			vBaryCoord = vec3(1.0,0.0,0.0);
		else if(a_position.w == 1.0)	vBaryCoord = vec3(0.0,1.0,0.0);
		else 							vBaryCoord = vec3(0.0,0.0,1.0);

		gl_Position	= matProjection * matCameraView * uModalMatrix * vec4(a_position.xyz,1.0);
	}
</vertex>

<fragment>
	#version 300 es
	precision mediump float;
	in vec3 vBaryCoord;

	out vec4 outColor;

	float edgeFactor(){
		vec3 d = fwidth(vBaryCoord);
		vec3 a3 = smoothstep(vec3(0.0), d*1.5, vBaryCoord);
		return min(min(a3.x, a3.y), a3.z);
	}

	const float uLineWidth = 0.005;
	const float uFeather = 0.003;
	const vec4 uLineColor = vec4(0.3,0.3,0.3,0.8);
	const vec4 uFaceColor = vec4(0.5,0.5,0.5,0.6);

	void main(void){
		/*Simple idea of how to color the border*/
		if( any( lessThan(vBaryCoord, vec3(0.01)) ) ){
		    outColor = uLineColor;
		}else{
		    outColor = uFaceColor;
		}
		
		//Set line width that always stays the same no matter the zoom.
		//outColor = mix(uLineColor, uFaceColor, edgeFactor());

		//How to set width and feathing, gets bigger/smaller based on zoom.
		//vec3 bcMix = smoothstep(vec3(uLineWidth),vec3(uLineWidth + uFeather),vBaryCoord);
		//float cmix = min(min(bcMix.x, bcMix.y), bcMix.z);
		//outColor = mix(uLineColor, uFaceColor, cmix);
	}
</fragment>