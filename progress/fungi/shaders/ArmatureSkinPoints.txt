<shader>
{
	"name":"ArmatureSkinPointShader",
	"useModelMatrix":true,
	"useUBOTransform":true,
	"uniforms":["uJoints","mat2x4"]
}
</shader>

<materials>
[
	{ "name":"ArmatureSkinPoint", "useBlending":false }
]
</materials>
	
<vertex>
#version 300 es
layout(location=0) in vec4 a_position;
layout(location=1) in vec3 a_norm;
layout(location=2) in vec2 a_uv;

layout(location=3) in vec4 a_jointIdx;
layout(location=4) in vec4 a_jointWeight;


uniform UBOTransform{
	mat4 matProjection;
	mat4 matCameraView;
	vec3 posCamera;
};

uniform mat4 uModalMatrix;
uniform mat3 uNormalMatrix;
uniform mat2x4[76] uJoints;

out highp vec2 vUV;
out lowp vec3 color;

vec3 dqBoneTransform(){
	/* NORMALIZE DATA */
	float t = 1.0 / (a_jointWeight.x+a_jointWeight.y+a_jointWeight.z+a_jointWeight.w);
	float jw0 = a_jointWeight[0] * t;
	float jw1 = a_jointWeight[1] * t;
	float jw2 = a_jointWeight[2] * t;
	float jw3 = a_jointWeight[3] * t;

	mat2x4 mJoint =	uJoints[int(a_jointIdx[0])] * jw0 +
					uJoints[int(a_jointIdx[1])] * jw1 +
					uJoints[int(a_jointIdx[2])] * jw2 +
					uJoints[int(a_jointIdx[3])] * jw3;

	/* RAW DATA - May Not be Normalized   
	mat2x4 mJoint =	uJoints[int(a_jointIdx[0])] * a_jointWeight[0] +
        			uJoints[int(a_jointIdx[1])] * a_jointWeight[1] +
        			uJoints[int(a_jointIdx[2])] * a_jointWeight[2] +
        			uJoints[int(a_jointIdx[3])] * a_jointWeight[3];
 */  

	vec3 v = a_position.xyz;
	vec4 Qr = mJoint[0].xyzw; //real (rot)
	vec4 Qd = mJoint[1].xyzw; //dual (trans)

	vec3 pos = v + cross(2.0 * Qr.xyz, cross(Qr.xyz, v) + Qr.w * v);			//Rotate Vector
	vec3 tran = 2.0 * (Qr.w * Qd.xyz - Qd.w * Qr.xyz + cross(Qr.xyz, Qd.xyz));	//Pull out Translation from DQ
	return pos + tran;
}

void main(void){
	gl_PointSize = 8.0;// + (5.0 * a_jointIdx.y);
	if(a_position.w == 0.0) color = vec3(1.0,0.0,0.0);
	else if(a_position.w == 1.0) color = vec3(0.0,1.0,0.0);
	else if(a_position.w == 2.0) color = vec3(0.0,0.0,1.0);
	else if(a_position.w == 9.0) color = vec3(1.0,0.5,0.5);
	else color = vec3(0.6,0.6,0.6);

    vec3 pos = dqBoneTransform();
    gl_Position =  matProjection * matCameraView * uModalMatrix * vec4(pos, 1.0);

	vUV = a_uv;
}
</vertex>

<fragment>
#version 300 es
precision mediump float;
in highp vec2 vUV;
in lowp vec3 color;
out vec4 outColor;

void main(void){ outColor = vec4(color,1.0); }
</fragment>