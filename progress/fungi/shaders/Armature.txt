<shader>
{
	"name":"ArmatureShader",
	"useModelMatrix":true,
	"useUBOTransform":true,
	"uniforms":[]
}
</shader>

<materials>
[
	{ "name":"MatArmature", "useBlending":false }
]
</materials>
	
<vertex>
#version 300 es
		layout(location=0) in vec4 a_position;
		layout(location=1) in vec3 a_norm;
		layout(location=2) in vec2 a_uv;

		layout(location=8) in vec4 a_QR; //Rotation
		layout(location=9) in vec4 a_QD; //Position

		layout(location=10) in vec4 a_offsetrot;
		layout(location=11) in vec3 a_offsetpos;

		uniform UBOTransform{
			mat4 matProjection;
			mat4 matCameraView;
			vec3 posCamera;
		};

		uniform mat4 uModalMatrix;
		uniform mat3 uNormalMatrix;

		out highp vec2 vUV;
		out lowp vec3 color;

		//https://github.com/robertsdionne/animus/blob/master/src/animus.htm
		//https://www.cs.utah.edu/~ladislav/dq/dqs.cg
		//http://donw.io/post/dual-quaternion-skinning/
		vec3 dqTransform(vec4 Qr, vec4 Qd, vec3 v){
			//Normalize - For my data I dont really need it but keep the src incase I do.
			//float len = 1.0 / length(Qr);
			//Qr *= len;
			//Qd *= len;

			//dqsFast example from dqs.cg has v + 2.0 * cross which allows rotation to work but translation fails
			//but thanks to a shader written by robertsdionne, he changed it to v + cross(2.0 *
			//Moving the 2.0 multiplication into the first cross makes it works correctly in webgl - SketchpunkLabs
			vec3 pos = v + cross(2.0 * Qr.xyz, cross(Qr.xyz, v) + Qr.w * v);			//Rotate Vector
			vec3 tran = 2.0 * (Qr.w * Qd.xyz - Qd.w * Qr.xyz + cross(Qr.xyz, Qd.xyz));	//Pull out Translation from DQ
			return pos + tran;
		}

		void main(void){
			gl_PointSize = 8.0;
			if(a_position.w == 0.0) color = vec3(1.0,0.0,0.0);
			else if(a_position.w == 1.0) color = vec3(0.0,1.0,0.0);
			else if(a_position.w == 2.0) color = vec3(0.0,0.0,1.0);
			else if(a_position.w == 3.0) color = vec3(0.0,0.0,0.0);
			else if(a_position.w == 9.0) color = vec3(1.0,0.5,0.5);
			else color = vec3(0.6,0.6,0.6);

        	vec3 pos = dqTransform(a_QR,a_QD,a_position.xyz);
			gl_Position = matProjection * matCameraView * uModalMatrix * vec4(pos, 1.0);

			vUV = a_uv;
		}
</vertex>
<fragment>
	#version 300 es
	precision mediump float;
	in highp vec2 vUV;
	in lowp vec3 color;
	out vec4 outColor;

	void main(void){ outColor = vec4(color,1.0); }
</fragment>